using System;
using System.Net.Http;
using System.Text;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;

public class ContextCreationAgentService : BackgroundService
{
    private readonly ILogger<ContextCreationAgentService> _logger;
    private readonly IHttpClientFactory _httpClientFactory;

    private readonly string _createContextUrl;
    private readonly int _intervalSeconds;
    private readonly bool _enabled;

    public ContextCreationAgentService(
        ILogger<ContextCreationAgentService> logger,
        IHttpClientFactory httpClientFactory)
    {
        _logger = logger;
        _httpClientFactory = httpClientFactory;

        // Configurable via environment variables or defaults
        _createContextUrl = Environment.GetEnvironmentVariable("CreateContextUrl")
            ?? "https://localhost:7071/api/createcontextlink";

        _intervalSeconds = int.TryParse(Environment.GetEnvironmentVariable("ContextCreateIntervalSeconds"), out var sec)
            ? Math.Max(5, sec) : 30;

        _enabled = (Environment.GetEnvironmentVariable("ContextAgentEnabled") ?? "true")
            .Equals("true", StringComparison.OrdinalIgnoreCase);
    }

    protected override async Task ExecuteAsync(CancellationToken stoppingToken)
    {
        if (!_enabled)
        {
            _logger.LogInformation("ContextCreationAgentService disabled (ContextAgentEnabled=false).");
            return;
        }

        _logger.LogInformation("ContextCreationAgentService starting. Interval={IntervalSeconds}s Url={Url}",
            _intervalSeconds, _createContextUrl);

        var client = _httpClientFactory.CreateClient();

        while (!stoppingToken.IsCancellationRequested)
        {
            try
            {
                var syntheticContext = new
                {
                    id = Guid.NewGuid(),
                    createdUtc = DateTime.UtcNow,
                    summary = "Synthetic context generated by agent",
                    note = "This will trigger webhook notifications to all registered subscribers."
                };

                // API expects { "Payload": "<string>" }
                var requestBody = new
                {
                    Payload = JsonSerializer.Serialize(syntheticContext)
                };

                var json = JsonSerializer.Serialize(requestBody);
                var content = new StringContent(json, Encoding.UTF8, "application/json");

                var response = await client.PostAsync(_createContextUrl, content, stoppingToken);
                var responseText = await response.Content.ReadAsStringAsync(stoppingToken);

                if (response.IsSuccessStatusCode)
                {
                    _logger.LogInformation("Created context: {ContextUrl}", responseText);
                }
                else
                {
                    _logger.LogWarning("Failed to create context. Status={Status} Body={Body}",
                        response.StatusCode, responseText);
                }
            }
            catch (OperationCanceledException) when (stoppingToken.IsCancellationRequested)
            {
                // Graceful shutdown
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error creating context.");
            }

            try
            {
                await Task.Delay(TimeSpan.FromSeconds(_intervalSeconds), stoppingToken);
            }
            catch (OperationCanceledException)
            {
                // exiting
            }
        }

        _logger.LogInformation("ContextCreationAgentService stopping.");
    }
}